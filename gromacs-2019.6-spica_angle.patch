diff -uprN src/gromacs/listed-forces/bonded.cpp ../gromacs-2019.6_spica/src/gromacs/listed-forces/bonded.cpp
--- src/gromacs/listed-forces/bonded.cpp	2024-01-09 13:05:08.964997188 +0900
+++ ../gromacs-2019.6_spica/src/gromacs/listed-forces/bonded.cpp	2024-01-09 13:09:02.243753812 +0900
@@ -3518,78 +3518,115 @@ real cross_bond_angle(int nbonds,
                       const t_mdatoms gmx_unused *md, t_fcdata gmx_unused *fcd,
                       int gmx_unused *global_atom_index)
 {
-    /* Potential from Lawrence and Skimmer, Chem. Phys. Lett. 372 (2003)
-     * pp. 842-847
-     */
-    int  i, ai, aj, ak, type, m, t1, t2;
+    int  i, ai, aj, ak, type, m, t1, t2, ki;
     rvec r_ij, r_kj, r_ik;
-    real vtot, vrt, s1, s2, s3, r1, r2, r3, r1e, r2e, r3e, krt, k1, k2, k3;
-    rvec f_i, f_j, f_k;
-    ivec jt, dt_ij, dt_kj;
+    real vtot;
+    ivec jt, dt_ij, dt_kj, dt_ik;
+    real Acoeff, v96, vbond, rmin, rmin2, fmag, fik;
+    real AA1, AA2, AA4, AA6, AA7, AA9, AA10, hoge;
+    real theta0, k, sig, eps;
+    real theta, cos_theta, cos_theta2, dr, dr2, va, dVdt;
+    Acoeff = 27.0/4.0;
 
     vtot = 0.0;
     for (i = 0; (i < nbonds); )
     {
-        type = forceatoms[i++];
-        ai   = forceatoms[i++];
-        aj   = forceatoms[i++];
-        ak   = forceatoms[i++];
-        r1e  = forceparams[type].cross_ba.r1e;
-        r2e  = forceparams[type].cross_ba.r2e;
-        r3e  = forceparams[type].cross_ba.r3e;
-        krt  = forceparams[type].cross_ba.krt;
-
-        /* Compute distance vectors ... */
-        t1 = pbc_rvec_sub(pbc, x[ai], x[aj], r_ij);
-        t2 = pbc_rvec_sub(pbc, x[ak], x[aj], r_kj);
-        pbc_rvec_sub(pbc, x[ai], x[ak], r_ik);
-
-        /* ... and their lengths */
-        r1 = norm(r_ij);
-        r2 = norm(r_kj);
-        r3 = norm(r_ik);
-
-        /* Deviations from ideality */
-        s1 = r1-r1e;
-        s2 = r2-r2e;
-        s3 = r3-r3e;
-
-        /* Energy (can be negative!) */
-        vrt   = krt*s3*(s1+s2);
-        vtot += vrt;
-
-        /* Forces */
-        k1 = -krt*(s3/r1);
-        k2 = -krt*(s3/r2);
-        k3 = -krt*(s1+s2)/r3;
-        for (m = 0; (m < DIM); m++)
+        type   = forceatoms[i++];
+        ai     = forceatoms[i++];
+        aj     = forceatoms[i++];
+        ak     = forceatoms[i++];
+        theta0 = forceparams[type].cross_ba.r1e*DEG2RAD; 
+        k      = forceparams[type].cross_ba.r2e;
+        sig    = forceparams[type].cross_ba.r3e;
+        eps    = forceparams[type].cross_ba.krt;
+        rmin   = 1.144714243*sig;
+        rmin2  = gmx::square(rmin);
+
+        ki = pbc_rvec_sub(pbc, x[ai], x[ak], r_ik);
+        dr2 = iprod(r_ik, r_ik);                                                  
+        dr  = dr2*gmx::invsqrt(dr2);                                               
+        theta  = bond_angle(x[ai], x[aj], x[ak], pbc,
+                            r_ij, r_kj, &cos_theta, &t1, &t2);  	
+        *dvdlambda += harmonic(k, 0, theta0, 0, theta, lambda, &va, &dVdt);
+        vtot += va;
+        cos_theta2 = gmx::square(cos_theta);
+        // Calculate harmonic angle potential
+        if (cos_theta2 < 1)
         {
-            f_i[m] = k1*r_ij[m] + k3*r_ik[m];
-            f_k[m] = k2*r_kj[m] - k3*r_ik[m];
-            f_j[m] = -f_i[m] - f_k[m];
+            int  m;
+            real st, sth;
+            real cik, cii, ckk;
+            real nrkj2, nrij2;
+            real nrkj_1, nrij_1;
+            rvec f_i, f_j, f_k;
+
+            st    = dVdt*gmx::invsqrt(1 - cos_theta2); /*  12		*/
+            sth   = st*cos_theta;                      /*   1		*/
+            nrij2 = iprod(r_ij, r_ij);                 /*   5		*/
+            nrkj2 = iprod(r_kj, r_kj);                 /*   5		*/
+
+            nrij_1 = gmx::invsqrt(nrij2);              /*  10		*/
+            nrkj_1 = gmx::invsqrt(nrkj2);              /*  10		*/
+
+            cik = st*nrij_1*nrkj_1;                    /*   2		*/
+            cii = sth*nrij_1*nrij_1;                   /*   2		*/
+            ckk = sth*nrkj_1*nrkj_1;                   /*   2		*/
+
+            for (m = 0; m < DIM; m++)
+            {           /*  39		*/
+                f_i[m]    = -(cik*r_kj[m] - cii*r_ij[m]);
+                f_k[m]    = -(cik*r_ij[m] - ckk*r_kj[m]);
+                f_j[m]    = -f_i[m] - f_k[m];
+                f[ai][m] += f_i[m];
+                f[aj][m] += f_j[m];
+                f[ak][m] += f_k[m];
+            }
+            if (g)
+            {
+                copy_ivec(SHIFT_IVEC(g, aj), jt);
+
+                ivec_sub(SHIFT_IVEC(g, ai), jt, dt_ij);
+                ivec_sub(SHIFT_IVEC(g, ak), jt, dt_kj);
+                t1 = IVEC2IS(dt_ij);
+                t2 = IVEC2IS(dt_kj);
+            }
+            rvec_inc(fshift[t1], f_i);
+            rvec_inc(fshift[CENTRAL], f_j);
+            rvec_inc(fshift[t2], f_k);
+        }                                          
+        if (dr2 > rmin2) {
+            continue;
         }
+        // Calculate LJ9-6 for SPICA angle 
+        AA1  = sig/dr;
+        AA2  = gmx::square(AA1);
+        AA4  = gmx::square(AA2);
+        AA6  = AA2*AA4; 
+        AA7  = AA1*AA6; 
+        AA9  = AA2*AA7;
+        AA10 = AA1*AA9;
+        AA7 *= 6.0;
+        AA10*= 9.0;
+        v96  = Acoeff*eps*(AA9 - AA6);
+        vbond = v96 + eps;
+        hoge  = eps/sig;
+        fmag  = Acoeff*hoge*(AA10 - AA7)*gmx::invsqrt(dr2);
+        vtot += vbond;             /* 1*/
 
-        for (m = 0; (m < DIM); m++)     /*  12	*/
+        if (g)
         {
-            f[ai][m] += f_i[m];
-            f[aj][m] += f_j[m];
-            f[ak][m] += f_k[m];
+            ivec_sub(SHIFT_IVEC(g, ai), SHIFT_IVEC(g, ak), dt_ik);
+            ki = IVEC2IS(dt_ik);
         }
-
-        /* Virial stuff */
-        if (g)
+        for (m = 0; (m < DIM); m++)     /*  15		*/
         {
-            copy_ivec(SHIFT_IVEC(g, aj), jt);
-
-            ivec_sub(SHIFT_IVEC(g, ai), jt, dt_ij);
-            ivec_sub(SHIFT_IVEC(g, ak), jt, dt_kj);
-            t1 = IVEC2IS(dt_ij);
-            t2 = IVEC2IS(dt_kj);
+            fik                 = fmag*r_ik[m];
+            f[ai][m]           += fik;
+            f[ak][m]           -= fik;
+            fshift[ki][m]      += fik;
+            fshift[CENTRAL][m] -= fik;
         }
-        rvec_inc(fshift[t1], f_i);
-        rvec_inc(fshift[CENTRAL], f_j);
-        rvec_inc(fshift[t2], f_k);          /* 9 */
-        /* 163 TOTAL	*/
+
     }
     return vtot;
 }
